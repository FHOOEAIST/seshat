<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2020 the original author or authors.
  ~ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  ~
  ~ This Source Code Form is subject to the terms of the Mozilla Public
  ~ License, v. 2.0. If a copy of the MPL was not distributed with this
  ~ file, You can obtain one at https://mozilla.org/MPL/2.0/.
  ~
  -->

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
>
    <part id="General">
        <faq id="Why yet another utility framework">
            <question>Why yet another logging framework?</question>
            <answer>
                <p>
                    Because logging in Java is a MASSIVE drain on resources. The original Log4J (not log4j2 mind you) increased
                    the average run of a machinelearning run by <strong>500%</strong> when the <strong>logging was turned off</strong>.
                    Yes it was worse when you decided to turn it on.
                </p>
                <p>
                    This nice review <a href="https://www.sitepoint.com/which-java-logging-framework-has-the-best-performance/">here</a>
                    proves that any self implemented logging framework can easily outperform the default java loggers.
                </p>
            </answer>
        </faq>
        <faq id="How can I provide my own logger">
            <question>How can I provide my own logger implementation?</question>
            <answer>
                <p>
                    Seshat uses the java <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ServiceLoader.html">ServiceLoader</a>
                    concept in order to load different LoggerFactory implementations. This means that, if you want to
                    provide your own logger, you need to do the following steps:
                </p>
                <ol>
                    <li>Implement a custom LoggerFactory that implements the science.aist.seshat.LoggerFactory interface.</li>
                    <li>
                        Register your own factory as a Service. This is achieved by creating a META-INF/services folder
                        inside your module. Put a file with the name science.aist.seshat.LoggerFactory in this folder
                        and write your fully qualified class name into the first line (e.g. com.mycompany.MyLoggerFactory).
                        Java will then automatically find this factory as a Service, and it will be loaded from our
                        service loader and used as a LoggerFactory.
                    </li>
                </ol>
            </answer>
        </faq>
        <faq id="What if there are multiple Logger Factory bindings">
            <question>What if there are multiple LoggerFactory bindings?</question>
            <answer>
                <p>
                    The service loader uses the first LoggerFactory that is registered as a Service. So if you have
                    multiple LoggerFactory services registered in your classpath, this leads to an undefined state,
                    where the first LoggerFactory is used, that is returned from the Service Loader.
                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ServiceLoader.html#findFirst()">Compare here.</a>
                </p>
            </answer>
        </faq>
    </part>
</faqs>